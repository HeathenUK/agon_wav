; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME4"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME5"
;    1	//Copyright HeathenUK 2023, others' copyrights (Envenomator, Dean Belfield, etc.) unaffected.
;    2	
;    3	#include <stdio.h>
;    4	#include <stdlib.h>
;    5	#include <ctype.h>
;    6	#include <stdint.h>
;    7	#include <string.h>
;    8	#include <eZ80.h>
;    9	#include <defines.h>
;   10	#include "mos-interface.h"
;   11	#include "vdp.h"
;   12	
;   13	// Parameters:
;   14	// - argc: Argument count
;   15	// - argv: Pointer to the argument string - zero terminated, parameters separated by spaces
;   16	//
;   17	
;   18	void putch24(uint24_t w)
;   19	{
_putch24:
.DEFINE "_putch24"

.VALUE _putch24

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "putch24",19,"_putch24"

.LINE 19

.DEFINE "w"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "temp"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   20		uint24_t temp = w;
;   21		
;   22		putch(temp & 0xFF); // write LSB
.LINE 22

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	(IX+%FFFFFFFC),A
	CALL	_putch
	LD	A,(IX+%FFFFFFFC)
	POP	BC
;   23		temp = temp >> 8;
.LINE 23

	UEXT	HL
	PUSH	HL
	LD	HL,(IX+%6)
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	LD	(IX+%FFFFFFFD),HL
;   24		putch(temp & 0xFF);
.LINE 24

	LD	A,(IX+%FFFFFFFD)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	(IX+%FFFFFFFC),A
	CALL	_putch
	LD	A,(IX+%FFFFFFFC)
	POP	BC
;   25		temp = temp >> 8;
.LINE 25

	UEXT	HL
	PUSH	HL
	LD	HL,(IX+%FFFFFFFD)
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	LD	(IX+%FFFFFFFD),HL
;   26		putch(temp & 0xFF);
.LINE 26

	LD	A,(IX+%FFFFFFFD)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   27		
;   28		return;	
;   29	}
.LINE 29

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch24 ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;temp                                  IX-3      3   variable
;w                                     IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch24",29,"_putch24"
;   30	
;   31	void putch16(uint16_t w) {
_putch16:
.DEFINE "_putch16"

.VALUE _putch16

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "putch16",31,"_putch16"

.LINE 31

.DEFINE "w"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   32	
;   33		putch(w & 0xFF); // write LSB
.LINE 33

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   34		putch(w >> 8);	 // write MSB	
.LINE 34

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	BC,HL
	DEC	SP
	PUSH	BC
	INC	SP
	POP	AF
	SEXT	HL
	PUSH	HL
	PUSH	BC
	INC	SP
	POP	BC
	INC	SP
	INC	SP
	PUSH	BC
	CALL	_putch
	POP	BC
;   35	
;   36	}
.LINE 36

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch16 ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;w                                     IX+6      2   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch16",36,"_putch16"
;   37	
;   38	uint8_t strtou8(const char *str) {
_strtou8:
.DEFINE "_strtou8"

.VALUE _strtou8

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "strtou8",38,"_strtou8"

.LINE 38

.DEFINE "str"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

.DEFINE "result"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "digit"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;   39	    uint8_t result = 0;
.LINE 39

	LD	(IX+%FFFFFFFF),%0
;   40	    const uint8_t maxDiv10 = 255 / 10;
;   41	    const uint8_t maxMod10 = 255 % 10;
;   42	
;   43	    // Skip leading white spaces
;   44	    while (*str == ' ' || *str == '\t' || *str == '\n') {
.LINE 44

	JR	L_5
L_6:
;   45	        str++;
.LINE 45

	LD	BC,(IX+%6)
	INC	BC
	LD	(IX+%6),BC
;   46	    }
L_5:
.LINE 46

	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,32
	OR	A,A
	SBC	HL,BC
	JR	Z,L_6
	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,9
	OR	A,A
	SBC	HL,BC
	JR	Z,L_6
	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JR	Z,L_6
;   47	
;   48	    // Convert digits
;   49	    while (*str >= '0' && *str <= '9') {
.LINE 49

	JR	L_13
L_14:
;   50	        uint8_t digit = *str - '0';
.LINE 50

	LD	HL,(IX+%6)
	LD	A,(HL)
	SUB	A,%30
	LD	(IX+%FFFFFFFE),A
;   51	        if (result > maxDiv10 || (result == maxDiv10 && digit > maxMod10)) {
.LINE 51

	LD	A,%19
	CP	A,(IX+%FFFFFFFF)
	JR	C,L_10
	LD	A,(IX+%FFFFFFFF)
	CP	A,%19
	JR	NZ,L_11
	LD	A,%5
	CP	A,(IX+%FFFFFFFE)
	JR	NC,L_11
L_10:
;   52	            return 255;
.LINE 52

	LD	A,%FF
	JR	L_17
;   53	        }
L_11:
.LINE 53

;   54	        result = result * 10 + digit;
.LINE 54

	LD	B,%A
	LD	C,(IX+%FFFFFFFF)
	MLT	BC
	LD	A,C
	ADD	A,(IX+%FFFFFFFE)
	LD	(IX+%FFFFFFFF),A
;   55	        str++;
.LINE 55

	LD	BC,(IX+%6)
	INC	BC
	LD	(IX+%6),BC
;   56	    }
L_13:
.LINE 56

	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,48
	OR	A,A
	SBC	HL,BC
	JP	M,L__10
	JP	PE,L_16
	JR	L__11
L__10:
	JP	PO,L_16
L__11:
	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,57
	OR	A,A
	SBC	HL,BC
	JP	P,L__12
	JP	PE,L_14
	JR	L__13
L__12:
	JP	PO,L_14
L__13:
L_16:
;   57	
;   58	    return result;
.LINE 58

	LD	A,(IX+%FFFFFFFF)
;   59	}
L_17:
.LINE 59

	LD	SP,IX
	POP	IX
	RET	


;**************************** _strtou8 ***************************
;Name                         Addr/Register   Size   Type
;digit                                 IX-2      1   variable
;result                                IX-1      1   variable
;str                                   IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "strtou8",59,"_strtou8"
;   60	
;   61	uint24_t strtou24(const char *str) {
_strtou24:
.DEFINE "_strtou24"

.VALUE _strtou24

.CLASS 2

.TYPE 78

.ENDEF

.BEGFUNC "strtou24",61,"_strtou24"

.LINE 61

.DEFINE "str"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

.DEFINE "result"

.CLASS 65

.VALUE -4

.TYPE 15

.ENDEF

.DEFINE "digit"

.CLASS 65

.VALUE -8

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
	DEC	SP
;   62	    uint32_t result = 0;
.LINE 62

	LD	BC,0
	XOR	A,A
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   63	    const uint32_t maxDiv10 = 1677721;
;   64	    const uint32_t maxMod10 = 5;
;   65	
;   66	    // Skip leading white spaces
;   67	    while (*str == ' ' || *str == '\t' || *str == '\n') {
.LINE 67

	JR	L_21
L_22:
;   68	        str++;
.LINE 68

	LD	BC,(IX+%6)
	INC	BC
	LD	(IX+%6),BC
;   69	    }
L_21:
.LINE 69

	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,32
	OR	A,A
	SBC	HL,BC
	JR	Z,L_22
	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,9
	OR	A,A
	SBC	HL,BC
	JR	Z,L_22
	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	JR	Z,L_22
;   70	
;   71	    // Convert digits
;   72	    while (*str >= '0' && *str <= '9') {
.LINE 72

	JR	L_29
L_30:
;   73	        uint32_t digit = *str - '0';
.LINE 73

	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	E,H
	LD	BC,48
	XOR	A,A
	CALL	__lsub
	LD	(IX+%FFFFFFF8),HL
	LD	(IX+%FFFFFFFB),E
;   74	        if (result > maxDiv10 || (result == maxDiv10 && digit > maxMod10)) {
.LINE 74

	LD	HL,1677721
	LD	E,%0
	LD	BC,(IX+%FFFFFFFC)
	LD	A,(IX+%FFFFFFFF)
	CALL	__lcmpu
	JR	C,L_26
	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	LD	BC,1677721
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_27
	LD	HL,5
	LD	E,%0
	LD	BC,(IX+%FFFFFFF8)
	LD	A,(IX+%FFFFFFFB)
	CALL	__lcmpu
	JR	NC,L_27
L_26:
;   75	            return 16777215;  // Maximum 24-bit unsigned int
.LINE 75

	LD	HL,16777215
	JR	L_33
;   76	        }
L_27:
.LINE 76

;   77	        result = result * 10 + digit;
.LINE 77

	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	LD	BC,10
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+%FFFFFFF8)
	LD	A,(IX+%FFFFFFFB)
	CALL	__ladd
	LD	(IX+%FFFFFFFC),HL
	LD	(IX+%FFFFFFFF),E
;   78	        str++;
.LINE 78

	LD	BC,(IX+%6)
	INC	BC
	LD	(IX+%6),BC
;   79	    }
L_29:
.LINE 79

	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,48
	OR	A,A
	SBC	HL,BC
	JP	M,L__23
	JP	PE,L_32
	JR	L__24
L__23:
	JP	PO,L_32
L__24:
	LD	HL,(IX+%6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,HL
	LD	HL,57
	OR	A,A
	SBC	HL,BC
	JP	P,L__25
	JP	PE,L_30
	JR	L__26
L__25:
	JP	PO,L_30
L__26:
L_32:
;   80	
;   81	    return result;
.LINE 81

	LD	HL,(IX+%FFFFFFFC)
;   82	}
L_33:
.LINE 82

	LD	SP,IX
	POP	IX
	RET	


;**************************** _strtou24 ***************************
;Name                         Addr/Register   Size   Type
;digit                                 IX-8      4   variable
;result                                IX-4      4   variable
;str                                   IX+6      3   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "strtou24",82,"_strtou24"
;   83	
;   84	#define CHUNK_SIZE 4096
;   85	
;   86	void load_wav(const char * filename, int8_t sample_id) {
_load_wav:
.DEFINE "_load_wav"

.VALUE _load_wav

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "load_wav",86,"_load_wav"

.LINE 86

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

.DEFINE "sample_id"

.CLASS 65

.VALUE 9

.TYPE 2

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "fp"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

.DEFINE "sample_buffer"

.CLASS 65

.VALUE -9

.TYPE 34

.ENDEF

.DEFINE "chunk"

.CLASS 65

.VALUE -12

.TYPE 14

.ENDEF

.DEFINE "remaining_data"

.CLASS 65

.VALUE -15

.TYPE 14

.ENDEF

.DEFINE "data_size"

.CLASS 65

.VALUE -20

.TYPE 15

.ENDEF

.DEFINE "header"

.CLASS 65

.VALUE -320

.DIM 300

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	HL,-357
	ADD	HL,SP
	LD	SP,HL
;   87	
;   88	    uint16_t i;
;   89	    uint32_t data_size;
;   90		uint24_t chunk, remaining_data, bytes_read = 0;
;   91	    unsigned char header[300];
;   92	    int8_t * sample_buffer;
;   93		//int8_t sample_buffer[CHUNK_SIZE];
;   94	    uint8_t fp;
;   95	    FIL * fo;
;   96	
;   97	    fp = mos_fopen(filename, 0x01);
.LINE 97

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFD),A
;   98	    if (!fp) {
.LINE 98

	OR	A,A
	JR	NZ,L_45
;   99	        printf("Error: could not open file %s\n", filename);
.LINE 99

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__29
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,10
	PUSH	BC
	CALL	___print_uputch
	POP	BC
;  100	        return;
.LINE 100

	JR	L_82
;  101	    }
L_45:
.LINE 101

;  102	
;  103	    for (i = 0; i < 300 && !mos_feof(fp); i++) {
.LINE 103

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_44
L_42:
;  104	        header[i] = mos_fgetc(fp);
.LINE 104

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,IX
	LD	DE,-320
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+%FFFFFFFA),HL
	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fgetc
	POP	BC
	LD	HL,(IX+%FFFFFFFA)
	LD	(HL),A
;  105	        if (i >= 7 && header[i - 7] == 'd' && header[i - 6] == 'a' && header[i - 5] == 't' && header[i - 4] == 'a') {
.LINE 105

	LD.LIS	BC,7
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_43
	LD	IY,(IX+%FFFFFFFA)
	LEA	HL,IY+%FFFFFFF9
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,100
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_43
	LD	IY,(IX+%FFFFFFFA)
	LEA	HL,IY+%FFFFFFFA
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,97
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_43
	LD	IY,(IX+%FFFFFFFA)
	LEA	HL,IY+%FFFFFFFB
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,116
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_43
	LD	IY,(IX+%FFFFFFFA)
	LEA	HL,IY+%FFFFFFFC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,97
	OR	A,A
	SBC	HL,BC
	JR	Z,L_67
;  106	            break; // found the start of the data
;  107	        }
;  108	    }
L_43:
.LINE 108

	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
L_44:
	LD.LIS	BC,300
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L__36
	LD	A,%1
	JR	L__37
L__36:
	XOR	A,A
L__37:
	LD	(IX+%FFFFFFF0),A
	OR	A,A
	JR	NZ,L_67
	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	CALL	_mos_feof
	POP	BC
	OR	A,A
	JR	Z,L_42
L_67:
;  109	
;  110	    if (i >= 300 || !(header[0] == 'R' && header[1] == 'I' && header[2] == 'F' && header[3] == 'F') ||
.LINE 110

	LD	A,(IX+%FFFFFFF0)
	OR	A,A
	JR	NZ,L_66
	LD	HL,-320
	LD	BC,IX
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,82
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	HL,IX
	LD	BC,-320
	ADD	HL,BC
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,73
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%2
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,70
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%3
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,70
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
;  111	        !(header[8] == 'W' && header[9] == 'A' && header[10] == 'V' && header[11] == 'E' &&
.LINE 111

	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%8
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,87
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%9
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,65
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%A
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,86
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%B
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,69
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
;  112	            header[12] == 'f' && header[13] == 'm' && header[14] == 't' && header[15] == ' ') ||
.LINE 112

	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%C
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,102
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%D
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,109
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%E
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,116
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%F
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,32
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
;  113	        !(header[16] == 0x10 && header[17] == 0x00 && header[18] == 0x00 && header[19] == 0x00 &&
.LINE 113

	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%10
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LD	A,(IY+%11)
	OR	A,A
	JR	NZ,L_66
	LD	IY,IX
	ADD	IY,BC
	LD	A,(IY+%12)
	OR	A,A
	JR	NZ,L_66
	LD	IY,IX
	ADD	IY,BC
	LD	A,(IY+%13)
	OR	A,A
	JR	NZ,L_66
;  114	            header[20] == 0x01 && header[21] == 0x00 && header[22] == 0x01 && header[23] == 0x00)) {
.LINE 114

	LD	IY,IX
	ADD	IY,BC
	LEA	HL,IY+%14
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LD	A,(IY+%15)
	OR	A,A
	JR	NZ,L_66
	LD	IY,IX
	ADD	IY,BC
	LEA	HL,IY+%16
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LD	A,(IY+%17)
	OR	A,A
	JR	Z,L_68
L_66:
;  115	        printf("Error: invalid WAV file\n");
.LINE 115

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__61
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  116	        mos_fclose(fp);
.LINE 116

	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  117	        return;
.LINE 117

	JR	L_82
;  118	    }
L_68:
.LINE 118

;  119	
;  120	    //sample_rate = header[24] | (header[25] << 8) | (header[26] << 16) | (header[27] << 24);
;  121	    data_size = header[i - 3] | (header[i - 2] << 8) | (header[i - 1] << 16) | (header[i] << 24);
.LINE 121

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,IX
	LD	DE,-320
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,-323
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),HL
	LD	HL,-323
	LD	BC,IX
	ADD	HL,BC
	LD	IY,(HL)
	UEXT	HL
	LD	L,(IY+%FFFFFFFE)
	PUSH	HL
	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	INC	SP
	POP	BC
	PUSH	BC
	LD	HL,BC
	LD	BC,-329	; spill
	CALL	__istix
	POP	BC
	POP	DE
	INC	SP
	LD	HL,-323
	PUSH	HL
	LD	HL,BC
	LD	BC,-332	; spill
	CALL	__istix
	POP	HL
	LD	BC,IX
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-335	; spill
	CALL	__istix
	POP	HL
	LD	BC,-332	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-335	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	IY,(HL)
	UEXT	HL
	LD	L,(IY+%FFFFFFFD)
	LD	BC,HL
	LD	A,H
	LD	HL,BC
	LD	BC,-326	; spill
	CALL	__istix
	LD	BC,-329	; unspill
	CALL	__ildix
	LD	BC,HL
	LD	HL,BC
	LD	BC,-326	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__lor
	LD	BC,HL
	PUSH	BC
	LD	HL,BC
	LD	BC,-338	; spill
	CALL	__istix
	POP	BC
	LD	HL,-323
	PUSH	HL
	LD	HL,BC
	LD	BC,-341	; spill
	CALL	__istix
	POP	HL
	LD	BC,IX
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-344	; spill
	CALL	__istix
	POP	HL
	LD	BC,-341	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-344	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	IY,(HL)
	DEC	IY
	UEXT	HL
	LD	L,(IY)
	PUSH	HL
	PUSH	HL
	UEXT	HL
	PUSH	HL
	INC	SP
	POP	BC
	POP	HL
	PUSH	BC
	LD	IY,-346	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),L
	POP	BC
	INC	SP
	INC	SP
	LD	HL,BC
	LD	BC,-326	; spill
	CALL	__istix
	LD	BC,-338	; unspill
	CALL	__ildix
	LD	BC,HL
	LD	HL,BC
	LD	BC,-326	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	LD	IY,-345	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),L
	LD	IY,-346	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	L,(IY)
	POP	BC
	LD	A,L
	PUSH	BC
	LD	IY,-345	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	L,(IY)
	POP	BC
	CALL	__lor
	LD	BC,HL
	PUSH	BC
	LD	HL,BC
	LD	BC,-349	; spill
	CALL	__istix
	POP	BC
	LD	HL,-323
	PUSH	HL
	LD	HL,BC
	LD	BC,-352	; spill
	CALL	__istix
	POP	HL
	LD	BC,IX
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-355	; spill
	CALL	__istix
	POP	HL
	LD	BC,-352	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	BC,-355	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	IY,(HL)
	LD	L,(IY)
	LD	IY,-356	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),L
	LD	BC,0
	LD	HL,BC
	LD	BC,-326	; spill
	CALL	__istix
	LD	BC,-349	; unspill
	CALL	__ildix
	LD	BC,HL
	LD	HL,BC
	LD	BC,-326	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	LD	IY,-345	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),L
	LD	IY,-356	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	L,(IY)
	POP	BC
	LD	A,L
	PUSH	BC
	LD	IY,-345	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	L,(IY)
	POP	BC
	CALL	__lor
	LD	(IX+%FFFFFFEC),HL
	LD	(IX+%FFFFFFEF),E
;  122	
;  123	    if (!(header[34] == 8 && header[35] == 0)) {
.LINE 123

	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LEA	HL,IY+%22
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,8
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_70
	LD	IY,IX
	LD	BC,-320
	ADD	IY,BC
	LD	A,(IY+%23)
	OR	A,A
	JR	Z,L_71
L_70:
;  124	        printf("Error: unsupported PCM format\n");
.LINE 124

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__64
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  125	        mos_fclose(fp);
.LINE 125

	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  126	        return;
.LINE 126

	JR	L_82
;  127	    }
L_71:
.LINE 127

;  128	
;  129		//printf("Uploading a sample with length %u\r\n", (header[i - 3] | (header[i - 2] << 8) | (header[i - 1] << 16) | (header[i] << 24)));
;  130	
;  131		//printf("Made up of bytes %u and %u", ((header[i - 3] | (header[i - 2] << 8) | (header[i - 1] << 16) | (header[i] << 24)) & 0xFFFF), ((header[i - 3] | (header[i - 2] << 8) | (header[i - 1] << 16) | (header[i] << 24)) >> 16));
;  132	
;  133	    putch(23);
.LINE 133

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  134	    putch(0);
.LINE 134

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  135	    putch(133);
.LINE 135

	LD	BC,133
	PUSH	BC
	CALL	_putch
	POP	BC
;  136		putch(sample_id * -1); //Sample ID
.LINE 136

	LD	A,(IX+%9)
	SEXT	HL
	LD	L,(IX+%9)
	CALL	__ineg
	PUSH	HL
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_putch
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
;  137	    putch(5); //Sample mode
.LINE 137

	LD	BC,5
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_putch
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
;  138	    putch(0); //Record mode
.LINE 138

	LD	BC,0
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_putch
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
;  139	
;  140		putch16(data_size & 0xFFFF);
.LINE 140

	LD	BC,(IX+%FFFFFFEC)
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_putch16
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
;  141		putch(data_size >> 16);
.LINE 141

	UEXT	HL
	PUSH	HL
	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	INC	SP
	POP	BC
	INC	SP
	INC	SP
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_putch
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
;  142			
;  143		sample_buffer = (int8_t *) malloc(CHUNK_SIZE);
.LINE 143

	LD	BC,4096
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_malloc
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	LD	(IX+%FFFFFFF7),HL
;  144			
;  145		remaining_data = data_size;
.LINE 145

	LD	BC,(IX+%FFFFFFEC)
	LD	(IX+%FFFFFFF1),BC
;  146			
;  147		while (remaining_data > 0) {
.LINE 147

	JR	L_79
L_80:
;  148			
;  149			if (remaining_data > CHUNK_SIZE) {
.LINE 149

	LD	BC,(IX+%FFFFFFF1)
	LD	HL,4096
	OR	A,A
	SBC	HL,BC
	JR	NC,L_73
;  150				chunk = CHUNK_SIZE;
.LINE 150

	LD	BC,4096
	LD	(IX+%FFFFFFF4),BC
;  151			} else chunk = remaining_data;
.LINE 151

	JR	L_74
L_73:
	LD	BC,(IX+%FFFFFFF1)
	LD	(IX+%FFFFFFF4),BC
L_74:
;  152			
;  153			mos_fread(fp, sample_buffer, chunk);
.LINE 153

	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_mos_fread
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
;  154	
;  155				for (i = 0; i < chunk; ++i) {
.LINE 155

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_77
L_75:
;  156					sample_buffer[i] -= 128;
.LINE 156

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	A,(IY)
	ADD	A,%80
	LD	(HL),A
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  157				}
L_77:
.LINE 157

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,(IX+%FFFFFFF4)
	OR	A,A
	SBC	HL,BC
	JR	C,L_75
;  158	
;  159			mos_puts(sample_buffer, chunk, 0);
.LINE 159

	LD	BC,0
	PUSH	BC
	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_mos_puts
	PUSH	IY
	PUSH	BC
	LD	IY,-357
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
;  160			remaining_data -= chunk;
.LINE 160

	LD	BC,(IX+%FFFFFFF4)
	LD	HL,(IX+%FFFFFFF1)
	OR	A,A
	SBC	HL,BC
	LD	(IX+%FFFFFFF1),HL
;  161		
;  162		}
L_79:
.LINE 162

	LD	BC,(IX+%FFFFFFF1)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_80
;  163		//	printf("Uploaded a sample with length %u\r\n", data_size);
;  164		free(sample_buffer);
.LINE 164

	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	CALL	_free
	POP	BC
;  165	    mos_fclose(fp);
.LINE 165

	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  166	}
L_82:
.LINE 166

	LD	SP,IX
	POP	IX
	RET	


;**************************** _load_wav ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_mos_puts                           IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_mos_fclose                         IMPORT  -----   function
;_mos_feof                           IMPORT  -----   function
;_mos_fgetc                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;header                              IX-320    300   variable
;data_size                            IX-20      4   variable
;G_4                                  IX-16      1   variable
;remaining_data                       IX-15      3   variable
;chunk                                IX-12      3   variable
;sample_buffer                         IX-9      3   variable
;G_0                                   IX-6      3   variable
;fp                                    IX-3      1   variable
;i                                     IX-2      2   variable
;sample_id                             IX+9      1   parameter
;filename                              IX+6      3   parameter


; Stack Frame Size: 369 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "load_wav",166,"_load_wav"
	SEGMENT STRSECT
L__29:
	DB	"Error: could not open file "
	DB	0
L__61:
	DB	"Error: invalid WAV file"
	DB	10,0
L__64:
	DB	"Error: unsupported PCM format"
	DB	10,0
	SEGMENT CODE
;  167	
;  168	void assign_sample(int8_t sample_id, uint8_t channel) {
_assign_sample:
.DEFINE "_assign_sample"

.VALUE _assign_sample

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "assign_sample",168,"_assign_sample"

.LINE 168

.DEFINE "sample_id"

.CLASS 65

.VALUE 6

.TYPE 2

.ENDEF

.DEFINE "channel"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  169		
;  170		putch(23);
.LINE 170

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  171		putch(0);
.LINE 171

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  172		putch(133);
.LINE 172

	LD	BC,133
	PUSH	BC
	CALL	_putch
	POP	BC
;  173		putch(channel);
.LINE 173

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  174		putch(4);
.LINE 174

	LD	BC,4
	PUSH	BC
	CALL	_putch
	POP	BC
;  175		putch(sample_id * -1);
.LINE 175

	LD	A,(IX+%6)
	SEXT	HL
	LD	L,(IX+%6)
	CALL	__ineg
	PUSH	HL
	CALL	_putch
	POP	BC
;  176		
;  177	}
.LINE 177

	LD	SP,IX
	POP	IX
	RET	


;**************************** _assign_sample ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;channel                               IX+9      1   parameter
;sample_id                             IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "assign_sample",177,"_assign_sample"
;  178	
;  179	void play_sample(uint8_t channel, uint8_t volume, uint24_t duration) {
_play_sample:
.DEFINE "_play_sample"

.VALUE _play_sample

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "play_sample",179,"_play_sample"

.LINE 179

.DEFINE "channel"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "volume"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "duration"

.CLASS 65

.VALUE 12

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  180		
;  181		putch(23);
.LINE 181

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  182		putch(0);
.LINE 182

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  183		putch(133);
.LINE 183

	LD	BC,133
	PUSH	BC
	CALL	_putch
	POP	BC
;  184		putch(channel);
.LINE 184

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  185		putch(0);
.LINE 185

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  186		putch(volume);
.LINE 186

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  187		putch16(0);
.LINE 187

	LD	BC,0
	PUSH	BC
	CALL	_putch16
	POP	BC
;  188		putch16(duration);
.LINE 188

	LD	BC,(IX+%C)
	PUSH	BC
	CALL	_putch16
	POP	BC
;  189		
;  190	}
.LINE 190

	LD	SP,IX
	POP	IX
	RET	


;**************************** _play_sample ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;duration                             IX+12      3   parameter
;volume                                IX+9      1   parameter
;channel                               IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "play_sample",190,"_play_sample"
;  191	
;  192	int main(int argc, char * argv[])
;  193	{
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",193,"_main"

.LINE 193

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "sample_id"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "channel"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "volume"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

.DEFINE "duration"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;  194	
;  195		uint8_t sample_id, channel, volume;
;  196		uint24_t duration;
;  197		
;  198		//printf("%u args\r\n", argc);
;  199		//Args: 1=filenames, 2=sample slot, 3=channel, 4=volume
;  200		
;  201	    if ((argc != 4) && (argc != 6)) {
.LINE 201

	LD	BC,4
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_87
	LD	BC,6
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_87
;  202	        printf("Usage is %s <filename> <sample slot> <channel> [volume] [duration]\r\n", argv[0]);
.LINE 202

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__73
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	HL,(IX+%9)
	LD	BC,(HL)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__74
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  203	        return 0;
.LINE 203

	OR	A,A
	SBC	HL,HL
	JR	L_92
;  204	    }
L_87:
.LINE 204

;  205		
;  206		sample_id = strtou8(argv[2]);
.LINE 206

	LD	IY,(IX+%9)
	LEA	HL,IY+%6
	LD	BC,(HL)
	PUSH	BC
	CALL	_strtou8
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  207		channel = strtou8(argv[3]);
.LINE 207

	LD	IY,(IX+%9)
	LEA	HL,IY+%9
	LD	BC,(HL)
	PUSH	BC
	CALL	_strtou8
	POP	BC
	LD	(IX+%FFFFFFFE),A
;  208		
;  209		if (argc == 4) {
.LINE 209

	LD	BC,4
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_90
;  210			//printf("args: 1=%s, 2=%u, 3=%u", argv[1], sample_id, channel);
;  211			load_wav(argv[1], sample_id);
.LINE 211

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	LD	IY,(IX+%9)
	LEA	HL,IY+%3
	LD	BC,(HL)
	PUSH	BC
	CALL	_load_wav
	POP	BC
	POP	BC
;  212			assign_sample(sample_id, channel);
.LINE 212

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	PUSH	BC
	CALL	_assign_sample
	POP	BC
	POP	BC
;  213		} else if (argc == 6) {
.LINE 213

	JR	L_91
L_90:
	LD	BC,6
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_91
;  214			volume = strtou8(argv[4]);
.LINE 214

	LD	IY,(IX+%9)
	LEA	HL,IY+%C
	LD	BC,(HL)
	PUSH	BC
	CALL	_strtou8
	POP	BC
	LD	(IX+%FFFFFFFD),A
;  215			duration = strtou24(argv[5]);
.LINE 215

	LD	IY,(IX+%9)
	LEA	HL,IY+%F
	LD	BC,(HL)
	PUSH	BC
	CALL	_strtou24
	POP	BC
	LD	(IX+%FFFFFFFA),HL
;  216			//printf("args: 1=%s, 2=%u, 3=%u, 4=%u", argv[1], sample_id, channel, volume);
;  217			load_wav(argv[1], sample_id);
.LINE 217

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	LD	IY,(IX+%9)
	LEA	HL,IY+%3
	LD	BC,(HL)
	PUSH	BC
	CALL	_load_wav
	POP	BC
	POP	BC
;  218			assign_sample(sample_id, channel);
.LINE 218

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	PUSH	BC
	CALL	_assign_sample
	POP	BC
	POP	BC
;  219			play_sample(sample_id, volume, duration);
.LINE 219

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	C,(IX+%FFFFFFFD)
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	PUSH	BC
	CALL	_play_sample
	POP	BC
	POP	BC
	POP	BC
;  220		}
L_91:
.LINE 220

;  221		
;  222		return 0;
.LINE 222

	OR	A,A
	SBC	HL,HL
L_92:
.LINE 223

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;duration                              IX-6      3   variable
;volume                                IX-3      1   variable
;channel                               IX-2      1   variable
;sample_id                             IX-1      1   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",223,"_main"
	SEGMENT STRSECT
L__73:
	DB	"Usage is "
	DB	0
L__74:
	DB	" <filename> <sample slot> <channel> [volume] [duration]"
	DB	13,10,0
	XREF _mos_fread:ROM
	XREF _mos_feof:ROM
	XREF _mos_fgetc:ROM
	XREF _mos_fclose:ROM
	XREF _mos_fopen:ROM
	XREF _mos_puts:ROM
	XREF _putch:ROM
	XREF _malloc:ROM
	XREF _free:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __lsub:ROM
	XREF __lmulu:ROM
	XREF __ineg:ROM
	XREF __lor:ROM
	XREF __stoiu:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XDEF _main
	XDEF _play_sample
	XDEF _assign_sample
	XDEF _load_wav
	XDEF _strtou24
	XDEF _strtou8
	XDEF _putch16
	XDEF _putch24
	END
